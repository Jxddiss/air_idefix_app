package com.nicholson.client_reservation_vol.pr√©sentation.R√©servationSp√©cifique

import android.content.Context
import android.content.Intent
import android.provider.CalendarContract
import android.util.Log
import android.widget.Toast
import com.nicholson.client_reservation_vol.pr√©sentation.Mod√®le
import com.nicholson.client_reservation_vol.pr√©sentation.OTD.R√©servationSp√©cifiqueOTD
import com.nicholson.client_reservation_vol.pr√©sentation.R√©servationSp√©cifique.ContratVuePr√©sentateurR√©servationSp√©cifique.*
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.Calendar
import java.util.Locale

class R√©servationSp√©cifiquePr√©sentateur(
    private val vue : IR√©servationSp√©cifiqueVue = R√©servationSp√©cifiqueVue()
) : IR√©servationSp√©cifiquePr√©sentateur {
    private val mod√®le : Mod√®le = Mod√®le.obtenirInstance()
    private val formatterDate = DateTimeFormatter.ofPattern( "dd MMMM yyyy" )
    private val formatterHeure = DateTimeFormatter.ofPattern( "HH:MM" )

    override fun traiterD√©marage() {
        val r√©servation = mod√®le.obtenirReservationCourrante()
        val vol = mod√®le.obtenirVolParId(r√©servation.idVol)
        val si√®geString = StringBuilder()
        r√©servation.si√®ges.forEach {
            si√®geString.append("${it.num√©ro} ")

        }
        val tempMtn = LocalDateTime.now()
        var tempsRestant = ChronoUnit.HOURS.between(tempMtn, vol.dateDepart).toString()

        var tempsUnite = "Heures"

        var barProgres : Int

        if(tempsRestant.toLong() > 24){
            tempsRestant = ChronoUnit.DAYS.between(tempMtn, vol.dateDepart).toString()
            tempsUnite = "Jours"
        }

        if(tempsUnite == "Jours") {
            barProgres = 30 - tempsRestant.toInt()
        }
        else{
            barProgres = 29
        }


        val r√©servationOTD = R√©servationSp√©cifiqueOTD(
            classe = r√©servation.si√®ges[0].classe,
            dateArriv√©e = vol.dateArrivee.format(formatterDate),
            dateDepart = vol.dateDepart.format(formatterDate),
            dur√©e = vol.dur√©e.toComponents {
                    hrs, min, _, _ ->
                "${hrs}h${min}"
            },
            heureArriv√©e = vol.dateArrivee.format(formatterHeure),
            heureDepart = vol.dateDepart.format(formatterHeure),
            nomVille = vol.aeroportFin.ville.nom,
            num√©roR√©servation = r√©servation.num√©roR√©servation,
            si√®ge = si√®geString.toString(),
            tempsRestant = tempsRestant,
            tempsUnite = tempsUnite,
            barProgres = barProgres.toString(),
            url_photo = vol.aeroportFin.ville.url_photo
        )
        vue.miseEnPlace(r√©servationOTD)
    }
    fun openCalendarApp(r√©servationSp√©cifiqueOTD: R√©servationSp√©cifiqueOTD,context: Context) {
        val userLocale = Locale.getDefault()
        val dateFormat = SimpleDateFormat("dd MMMM yyyy", userLocale)

        try {

            val dateD√©part = dateFormat.parse(r√©servationSp√©cifiqueOTD.dateDepart)
            val dateArriv√©e = dateFormat.parse(r√©servationSp√©cifiqueOTD.dateArriv√©e)


            val heureDepart = r√©servationSp√©cifiqueOTD.heureDepart
            val heureArriv√©e = r√©servationSp√©cifiqueOTD.heureArriv√©e


            val heureDepartSplit = heureDepart.split(":")
            val heureArriv√©eSplit = heureArriv√©e.split(":")

            val hourDepart = heureDepartSplit[0].toInt()
            val minuteDepart = heureDepartSplit[1].toInt()

            val hourArriv√©e = heureArriv√©eSplit[0].toInt()
            val minuteArriv√©e = heureArriv√©eSplit[1].toInt()


            val startCalendar = Calendar.getInstance()
            startCalendar.time = dateD√©part
            startCalendar.set(Calendar.HOUR_OF_DAY, hourDepart)
            startCalendar.set(Calendar.MINUTE, minuteDepart)


            val endCalendar = Calendar.getInstance()
            endCalendar.time = dateArriv√©e
            endCalendar.set(Calendar.HOUR_OF_DAY, hourArriv√©e)
            endCalendar.set(Calendar.MINUTE, minuteArriv√©e)

            val eventLocation = r√©servationSp√©cifiqueOTD.nomVille
            val emojieAvion ="üõ¨"
            val startTime = startCalendar.timeInMillis
            val endTime = endCalendar.timeInMillis

            val intent = Intent(Intent.ACTION_INSERT)
                .setData(CalendarContract.Events.CONTENT_URI)
                .putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, startTime)
                .putExtra(CalendarContract.EXTRA_EVENT_END_TIME, endTime)
                .putExtra(CalendarContract.Events.TITLE, "Air Id√©fix")
                .putExtra(CalendarContract.Events.DESCRIPTION, emojieAvion)
                .putExtra(CalendarContract.Events.EVENT_LOCATION, eventLocation)

            context.startActivity(intent)

        } catch (e: Exception) {
            Toast.makeText(context, "Erreur lors de l'ouverture du calendrier : ${e.message}", Toast.LENGTH_LONG).show()
        }

    }


    override fun traiterModifier() {
        vue.redirigerModifier()
    }


}